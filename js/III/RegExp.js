// Регулярные выражения

let regexp = new RegExp("шаблон", "флаги");

// краткая форма записи
let regexp = /шаблон/; // без флагов
var regexp = /шаблон/gmi; // с флагами g m i

// Если флагов и специальных символов нет, поиск по паттерну – то же самое, что и обычный поиск подстроки

i // ищет независимо от регистра, не различает между А и а
g // ищет все совпадения (без флага – только первое)
m // многострочный режим


let result = str.search(regexp); // возвращает позицию первого совпадения или ‐1 (ищет только первое совпадение)

let result = str.match(regexp); // без флага g
// возвращает массив, состоящий из этого совпадения, с дополнительными свойствами или null
    result[0]; // всё совпадение полностью
    result[1]; // часть совпадения, содержащееся в скобках ( )
    result.index; // позиция совпадения
    result.input; // строка, в которой был поиск 
    result.groups;

let result = str.match(regexp); // с флагом g
// возвращает обычный массив или null; скобки не действуют

str.split(regexp_or_substr, limit); // Разбивает строку в массив по разделителю

str.replace(regexp, str_or_func);
// поиск и замена подстроки в строке
// Спецсимволы
    " $$ "; // Вставляет "$" .
    " $& "; // Вставляет всё найденное совпадение.
    " $` "; // Вставляет часть строки до совпадения.
    " $' "; // Вставляет часть строки после совпадения.
    " $n "; // где n ‑‑ цифра или двузначное число, обозначает n‐ю по счёту скобку, если считать слева‑направо.
// аргументы функции
    'str'; // найденное совпадение,
    'p1, p2, ..., pn' // содержимое скобок (если есть),
    'offset'; // позиция, на которой найдено совпадение,
    's'; // исходная строка.




regexp.test(str); // проверяет, есть ли хоть одно совпадение в строке; true/false 

regexp.exec(str); // без флага g
// ищет и возвращает первое совпадение

regexp.exec(str); // с флагом g
// ищет и возвращает совпадение и запоминает его позицию в свойстве lastIndex
// следующий поиск начинается с lastIndex
// Если совпадений не найдено, то сбрасывает lastIndex



// Классы

"/\d/"; // (digit) Цифра, символ от 0 до 9
    // то же что и "[0‐9]"
"/\D/"; // не \d

"/\s/"; // (space) Пробельный символ, включая табы, переводы строки и т.п.
"/\S/"; // не \s

"/\w/"; // (word) буква латинского алфавита или цифра или подчёркивание '_';
    // то же что и "[a‐zA‐Z0‐9_]"
"/\W/"; // не \w

"/\b/"; // границу между символами "/\bслово\b/"
"/\B/"; // не \b

"/./"; // любой символ, кроме перевода строки

"\ "; // символ экранирования

"/[xyz]/"; // 'набор'; любой символ из набора (только один из!!!): x, y, z

"/[x-y]/"; // 'диапазон'; произвольный символ от x до y; a-z A-Z 0-9 а-яё А-ЯЁ
"/[^x-y]/"; // 'исключающий диапазон'

// в диапазонах можно использовать спецсимволы без экранирования (а можно и с экранированием):
    // "/[.]/" <=> "/[\.]/"


"{n}"; // квантификатор (quantifier);
    "/\d{5}/"; // 5-значное число
    "/\d{3-5}/"; // от 3 до 5 -значное число
    "/\d{3,}/"; // от 3 и более -значное число

"/+/"; // 'один или более', то же что {1,}
"/?/"; // 'ноль или один', то же что и {0,1}
"/*/"; // 'ноль или более', то же что {0,}

// Ленивый режим работы квантификаторов (второй знак вопроса)
    "*?", "+?", "??";



// Скобочные выражения / Скобочные группы / ( )

// Скобочную группу можно исключить из запоминания, добавив в её начало ?:
    "/(?:go)+/";


// Использовать скобочную группу:
    "$1" // в строке замены
    "\1" // в шаблоне


// Альтернация  |  ИЛИ
    "/html|css/";


// Якоря
    "/^/"; // (каретка) начало строки
    "/$/"; // конец строки

// В многострочном режиме якоря означают не только начало/конец текста, но и начало/конец строки ( \n ).


// предпросмотр ?=